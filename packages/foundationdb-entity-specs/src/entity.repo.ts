// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
// @ts-ignore
import { Context } from '@openland/context';
// @ts-ignore
import { Subspace } from '@openland/foundationdb';
// @ts-ignore
import { EntityStorage, BaseStore, codecs as c } from '@openland/foundationdb-entity';
// @ts-ignore
import { Entity, EntityFactory, EntityDescriptor, SecondaryIndexDescriptor } from '@openland/foundationdb-entity';

export interface SimpleEntityShape {
    id: string;
    value: string;
    value2: number;
    value3: boolean | null;
}

export interface SimpleEntityCreateShape {
    value: string;
    value2: number;
    value3?: boolean | null | undefined;
}

export class SimpleEntity extends Entity<SimpleEntityShape> {
    get id(): string { return this._rawValue.id; }
    get value(): string {  return this._rawValue.value; }
    get value2(): number {  return this._rawValue.value2; }
    get value3(): boolean | null { return this._rawValue.value3; }
}

export class SimpleEntityFactory extends EntityFactory<SimpleEntityShape, SimpleEntity> {

    static async open(storage: EntityStorage) {
        let subspace = await storage.resolveEntityDirectory('simpleEntity');
        let secondaryIndexes: SecondaryIndexDescriptor[] = [];
        let codec = c.struct({
            id: c.string,
            value: c.string,
            value2: c.number,
            value3: c.optional(c.boolean),
        });
        let descriptor: EntityDescriptor<SimpleEntityShape> = {
            name: 'SimpleEntity',
            storageKey: 'simpleEntity',
            subspace, codec, secondaryIndexes, storage
        };
        return new SimpleEntityFactory(descriptor);
    }

    private constructor(descriptor: EntityDescriptor<SimpleEntityShape>) {
        super(descriptor);
    }

    create(ctx: Context, id: string, src: SimpleEntityCreateShape): Promise<SimpleEntity> {
        return this._create(ctx, [id], this.descriptor.codec.normalize({id, ...src }));
    }

    findById(ctx: Context, id: string): Promise<SimpleEntity | null> {
        return this._findById(ctx, [id]);
    }

    protected _createEntityInstance(value: any): SimpleEntity {
        return new SimpleEntity([value.id], value, this.descriptor);
    }
}

export interface Store extends BaseStore {
    readonly SimpleEntity: SimpleEntityFactory;
}

export async function openStore(storage: EntityStorage): Promise<Store> {
    let SimpleEntityPromise = SimpleEntityFactory.open(storage);
    return {
        storage,
        SimpleEntity: await SimpleEntityPromise,
    };
}
