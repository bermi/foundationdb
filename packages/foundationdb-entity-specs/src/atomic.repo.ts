// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
// @ts-ignore
import { Context } from '@openland/context';
// @ts-ignore
import { Subspace } from '@openland/foundationdb';
// @ts-ignore
import { EntityStore } from '@openland/foundationdb-entity';
// @ts-ignore
import { AtomicIntegerFactory, AtomicBooleanFactory } from '@openland/foundationdb-entity';

export class SimpleAtomicBooleanFactory extends AtomicBooleanFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('simpleAtomicBoolean');
        return new SimpleAtomicBooleanFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(key: string) {
        return this._findById([key]);
    }

    get(ctx: Context, key: string) {
        return this._get(ctx, [key]);
    }

    set(ctx: Context, key: string, value: boolean) {
        return this._set(ctx, [key], value);
    }

    invert(ctx: Context, key: string) {
        return this._invert(ctx, [key]);
    }
}

export class SimpleAtomicIntegerFactory extends AtomicIntegerFactory {

    static async create(store: EntityStore) {
        let directory = await store.resolveAtomicDirectory('simpleAtomicInteger');
        return new SimpleAtomicIntegerFactory(store, directory);
    }

    private constructor(store: EntityStore, subspace: Subspace) {
        super(store, subspace);
    }

    byId(key: string) {
        return this._findById([key]);
    }

    get(ctx: Context, key: string) {
        return this._get(ctx, [key]);
    }

    set(ctx: Context, key: string, value: number) {
        return this._set(ctx, [key], value);
    }

    add(ctx: Context, key: string, value: number) {
        return this._add(ctx, [key], value);
    }

    increment(ctx: Context, key: string) {
        return this._increment(ctx, [key]);
    }

    decrement(ctx: Context, key: string) {
        return this._decrement(ctx, [key]);
    }
}
