// THIS FILE IS AUTOGENERATED! DO NOT TRY TO EDIT!
// @ts-ignore
import { Context } from '@openland/context';
// @ts-ignore
import { Subspace, Watch, RangeOptions } from '@openland/foundationdb';
// @ts-ignore
import { EntityStorage, BaseStore, codecs as c } from '@openland/foundationdb-entity';
// @ts-ignore
import { Entity, EntityFactory, EntityDescriptor, SecondaryIndexDescriptor, ShapeWithMetadata, PrimaryKeyDescriptor, FieldDescriptor } from '@openland/foundationdb-entity';

export interface RangeIndexShape {
    id: number;
    range1: number;
    range2: number;
}

export interface RangeIndexCreateShape {
    range1: number;
    range2: number;
}

export class RangeIndex extends Entity<RangeIndexShape> {
    get id(): number { return this._rawValue.id; }
    get range1(): number { return this._rawValue.range1; }
    set range1(value: number) {
        let normalized = this.descriptor.codec.fields.range1.normalize(value);
        if (this._rawValue.range1 !== normalized) {
            this._rawValue.range1 = normalized;
            this._updatedValues.range1 = normalized;
            this.invalidate();
        }
    }
    get range2(): number { return this._rawValue.range2; }
    set range2(value: number) {
        let normalized = this.descriptor.codec.fields.range2.normalize(value);
        if (this._rawValue.range2 !== normalized) {
            this._rawValue.range2 = normalized;
            this._updatedValues.range2 = normalized;
            this.invalidate();
        }
    }
}

export class RangeIndexFactory extends EntityFactory<RangeIndexShape, RangeIndex> {

    static async open(storage: EntityStorage) {
        let subspace = await storage.resolveEntityDirectory('rangeIndex');
        let secondaryIndexes: SecondaryIndexDescriptor[] = [];
        secondaryIndexes.push({ name: 'test', storageKey: 'test', type: { type: 'range', fields: [{ name: 'range1', type: 'integer' }, { name: 'range2', type: 'integer' }] }, subspace: await storage.resolveEntityIndexDirectory('rangeIndex', 'test') });
        let primaryKeys: PrimaryKeyDescriptor[] = [];
        primaryKeys.push({ name: 'id', type: 'integer' });
        let fields: FieldDescriptor[] = [];
        fields.push({ name: 'range1', type: { type: 'integer' }, secure: false });
        fields.push({ name: 'range2', type: { type: 'integer' }, secure: false });
        let codec = c.struct({
            id: c.integer,
            range1: c.integer,
            range2: c.integer,
        });
        let descriptor: EntityDescriptor<RangeIndexShape> = {
            name: 'RangeIndex',
            storageKey: 'rangeIndex',
            subspace, codec, secondaryIndexes, storage, primaryKeys, fields
        };
        return new RangeIndexFactory(descriptor);
    }

    private constructor(descriptor: EntityDescriptor<RangeIndexShape>) {
        super(descriptor);
    }

    readonly testIndex = Object.freeze({
        findAll: (ctx: Context, range1: number) => {
            return this._findRangeFromIndex(ctx, this.descriptor.secondaryIndexes[0], [range1]);
        },
        findRange: (ctx: Context, range1: number, opts?: RangeOptions<number>) => {
            return this._findRangeFromIndex(ctx, this.descriptor.secondaryIndexes[0], [range1], { limit: opts && opts.limit, reverse: opts && opts.reverse, after: opts && opts.after ? [opts.after] : undefined});
        }
    });

    create(ctx: Context, id: number, src: RangeIndexCreateShape): Promise<RangeIndex> {
        return this._create(ctx, [id], this.descriptor.codec.normalize({ id, ...src }));
    }

    findById(ctx: Context, id: number): Promise<RangeIndex | null> {
        return this._findById(ctx, [id]);
    }

    watch(ctx: Context, id: number): Watch {
        return this._watch(ctx, [id]);
    }

    protected _createEntityInstance(ctx: Context, value: ShapeWithMetadata<RangeIndexShape>): RangeIndex {
        return new RangeIndex([value.id], value, this.descriptor, this._flush, ctx);
    }
}

export interface Store extends BaseStore {
    readonly RangeIndex: RangeIndexFactory;
}

export async function openStore(storage: EntityStorage): Promise<Store> {
    let RangeIndexPromise = RangeIndexFactory.open(storage);
    return {
        storage,
        RangeIndex: await RangeIndexPromise,
    };
}
